{"version":3,"file":"static/js/655.195f6d0b.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/memeber.mock.ts","api/hooks/order.mock.ts","api/hooks/point.mock.ts","api/hooks/useGetProductOptions.ts","api/hooks/products.mock.ts","api/hooks/wish.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from \"msw\";\r\n\r\nimport { getCategoriesPath } from \"./useGetCategorys\";\r\n\r\nexport const categoriesMockHandler = [\r\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\r\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\r\n  }),\r\n];\r\n\r\nconst CATEGORIES_RESPONSE_DATA = [\r\n  {\r\n    id: 2920,\r\n    name: \"생일\",\r\n    description: \"감동을 높여줄 생일 선물 리스트\",\r\n    color: \"#5949a3\",\r\n    imageUrl:\r\n      \"https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png\",\r\n  },\r\n  {\r\n    id: 2930,\r\n    name: \"교환권\",\r\n    description: \"놓치면 후회할 교환권 특가\",\r\n    color: \"#9290C3\",\r\n    imageUrl:\r\n      \"https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg\",\r\n  },\r\n];\r\n","import { rest } from \"msw\";\r\n\r\nimport { BASE_URL } from \"../instance\";\r\n\r\ninterface User {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst users: User[] = [\r\n  {\r\n    email: \"test@test.com\",\r\n    password: \"test1234\",\r\n  },\r\n];\r\n\r\nexport const memberMockHandler = [\r\n  rest.post(`${BASE_URL}/api/members/login`, async (req, res, ctx) => {\r\n    const { email, password } = await req.json();\r\n    const foundUser = users.find((user) => user.email === email && user.password === password);\r\n    if (!foundUser) {\r\n      return res(ctx.status(403), ctx.json({ error: \"이메일 또는 비밀번호가 잘못되었습니다.\" }));\r\n    }\r\n\r\n    const token = \"mockToken\";\r\n\r\n    return res(ctx.status(200), ctx.json({ email: email, accessToken: token }));\r\n  }),\r\n\r\n  rest.post(`${BASE_URL}/api/members/register`, async (req, res, ctx) => {\r\n    const { email, password } = await req.json();\r\n\r\n    const existingUser = users.find((user) => user.email === email);\r\n    if (existingUser) {\r\n      return res(ctx.status(400), ctx.json({ error: \"이미 등록된 이메일입니다.\" }));\r\n    }\r\n\r\n    users.push({ email: email, password: password });\r\n\r\n    const token = \"mockToken\";\r\n    return res(ctx.status(201), ctx.json({ email, token }));\r\n  }),\r\n];\r\n","import { rest } from \"msw\";\r\n\r\nimport { BASE_URL } from \"../instance\";\r\n\r\nexport const orderMockHandler = [\r\n  rest.post(`${BASE_URL}/api/orders`, async (req, res, ctx) => {\r\n    const {\r\n      productId,\r\n      productQuantity,\r\n      hasCashReceipt,\r\n      cashReceiptType,\r\n      cashReceiptNumber,\r\n      message,\r\n    } = await req.json();\r\n\r\n    console.log({\r\n      productId,\r\n      productQuantity,\r\n      hasCashReceipt,\r\n      cashReceiptType,\r\n      cashReceiptNumber,\r\n      message,\r\n    });\r\n\r\n    return res(ctx.status(200));\r\n  }),\r\n];\r\n","import { rest } from \"msw\";\r\n\r\nimport { BASE_URL } from \"../instance\";\r\n\r\nexport const pointMockHandler = [\r\n  rest.get(`${BASE_URL}/api/points`, (_, res, ctx) => {\r\n    const mockPointData = { point: 30000 };\r\n\r\n    console.log(\"Fetching point data\");\r\n\r\n    return res(ctx.status(200), ctx.json(mockPointData));\r\n  }),\r\n];\r\n","import { useSuspenseQuery } from \"@tanstack/react-query\";\r\n\r\nimport type { ProductOptionsData } from \"@/types\";\r\n\r\nimport { BASE_URL, fetchInstance } from \"../instance\";\r\nimport type { ProductDetailRequestParams } from \"./useGetProductDetail\";\r\n\r\ntype Props = ProductDetailRequestParams;\r\n\r\nexport type ProductOptionsResponseData = ProductOptionsData[];\r\n\r\nexport const getProductOptionsPath = (productId: string) =>\r\n  `${BASE_URL}/api/products/${productId}/options`;\r\n\r\nexport const getProductOptions = async (params: ProductDetailRequestParams) => {\r\n  const response = await fetchInstance.get<ProductOptionsResponseData>(\r\n    getProductOptionsPath(params.productId),\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const useGetProductOptions = ({ productId }: Props) => {\r\n  return useSuspenseQuery({\r\n    queryKey: [getProductOptionsPath(productId)],\r\n    queryFn: () => getProductOptions({ productId }),\r\n  });\r\n};\r\n","import { rest } from \"msw\";\r\n\r\nimport { getProductDetailPath } from \"./useGetProductDetail\";\r\nimport { getProductOptionsPath } from \"./useGetProductOptions\";\r\nimport { getProductsPath } from \"./useGetProducts\";\r\n\r\nexport const productsMockHandler = [\r\n  rest.get(\r\n    getProductsPath({\r\n      categoryId: \"2920\",\r\n    }),\r\n    (_, res, ctx) => {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    },\r\n  ),\r\n  rest.get(\r\n    getProductsPath({\r\n      categoryId: \"2930\",\r\n    }),\r\n    (_, res, ctx) => {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    },\r\n  ),\r\n  rest.get(getProductDetailPath(\":productId\"), (_, res, ctx) => {\r\n    return res(ctx.json(PRODUCTS_MOCK_DATA.products[0]));\r\n  }),\r\n  rest.get(getProductOptionsPath(\":productId\"), (_, res, ctx) => {\r\n    return res(\r\n      ctx.json([\r\n        {\r\n          id: 1,\r\n          name: \"Option A\",\r\n          quantity: 10,\r\n          productId: 1,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Option B\",\r\n          quantity: 20,\r\n          productId: 1,\r\n        },\r\n      ]),\r\n    );\r\n  }),\r\n];\r\n\r\nconst PRODUCTS_MOCK_DATA = {\r\n  products: [\r\n    {\r\n      id: 3245119,\r\n      name: \"[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)\",\r\n      imageUrl:\r\n        \"https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png\",\r\n      price: 145000,\r\n      description:\r\n        \"소중한 사람에게 마음을 표현해 보세요.\\r\\n\\r\\n<카카오 선물하기 단독 각인 서비스 신청 방법>\\r\\nSTEP 1) 상품 선택: 원하는 상품 선택\\r\\nSTEP 2) 각인 문구 입력\\r\\n- 영문 대,소문자/숫자 입력 가능\\r\\n- 띄어쓰기 포함 최대 16자까지 입력가능\\r\\n- 각인 위치 변경 불가\\r\\n\\r\\n<각인 서비스 신청 시 유의사항>\\r\\n- 배송지 입력 후에는 각인 작업이 진행되어 각인 문구 변경을 불가하며 주문 제품의 결함 사유를 제외하고는 각인 디자인에 대한 불만족 사유 등으로 인한 교환/환불은 불가합니다.\\r\\n- 배송은 배송지 입력 후에 약 3-5일이 소요되며, 각인 작업 소요량에 따라 배송 일정은 변동될 수 있습니다.\\r\\n- 레이저 각인으로 인한 미세한 스크래치 느낌이 날 수 있습니다.\",\r\n      options: [\r\n        {\r\n          id: 1,\r\n          name: \"[옵션 1] 아쿠아 델라 레지나\",\r\n          quantity: 10000,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"[옵션 2] 엔젤 디 피렌체\",\r\n          quantity: 10000,\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"[옵션 3] 타바코 토스카노\",\r\n          quantity: 10000,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2263833,\r\n      name: \"외식 통합권 10만원권\",\r\n      imageUrl:\r\n        \"https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png\",\r\n      price: 100000,\r\n    },\r\n    {\r\n      id: 6502823,\r\n      name: \"[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드\",\r\n      imageUrl:\r\n        \"https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg\",\r\n      price: 108000,\r\n    },\r\n    {\r\n      id: 1181831,\r\n      name: \"[선물포장] 소바쥬 오 드 뚜왈렛 60ML\",\r\n      imageUrl:\r\n        \"https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg\",\r\n      price: 122000,\r\n    },\r\n    {\r\n      id: 1379982,\r\n      name: \"[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)\",\r\n      imageUrl:\r\n        \"https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg\",\r\n      price: 133000,\r\n    },\r\n  ],\r\n  hasNext: false,\r\n};\r\n","import { rest } from \"msw\";\r\n\r\nimport { BASE_URL } from \"../instance\";\r\n\r\ninterface Product {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  imageUrl: string;\r\n}\r\n\r\ninterface Wish {\r\n  id: number;\r\n  product: Product;\r\n}\r\n\r\nlet wishes: Wish[] = [\r\n  {\r\n    id: 1,\r\n    product: {\r\n      id: 11,\r\n      name: \"Product A\",\r\n      price: 1000,\r\n      imageUrl:\r\n        \"https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png\",\r\n    },\r\n  },\r\n  {\r\n    id: 2,\r\n    product: {\r\n      id: 12,\r\n      name: \"Product B\",\r\n      price: 2000,\r\n      imageUrl:\r\n        \"https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png\",\r\n    },\r\n  },\r\n];\r\n\r\nexport const wishlistMockHandler = [\r\n  rest.post(`${BASE_URL}/api/wishes`, async (_, res, ctx) => {\r\n    const result = { id: 3, productId: \"Product C\" };\r\n    return res(ctx.status(201), ctx.json(result));\r\n  }),\r\n\r\n  rest.delete(`${BASE_URL}/api/wishes/:wishId`, (req, res, ctx) => {\r\n    const { wishId } = req.params;\r\n    const wishIndex = wishes.findIndex((wish) => wish.id === parseInt(wishId as string));\r\n\r\n    if (wishIndex === -1) {\r\n      return res(ctx.status(404), ctx.json({ error: \"Wish not found\" }));\r\n    }\r\n\r\n    wishes = wishes.filter((wish) => wish.id !== parseInt(wishId as string));\r\n    console.log(wishes);\r\n    return res(ctx.status(204));\r\n  }),\r\n\r\n  rest.get(`${BASE_URL}/api/wishes`, (_, res, ctx) => {\r\n    return res(ctx.status(200), ctx.json({ content: wishes }));\r\n  }),\r\n];\r\n","import { setupWorker } from \"msw\";\r\n\r\nimport { categoriesMockHandler } from \"@/api/hooks/categories.mock\";\r\nimport { memberMockHandler } from \"@/api/hooks/memeber.mock\";\r\nimport { orderMockHandler } from \"@/api/hooks/order.mock\";\r\nimport { pointMockHandler } from \"@/api/hooks/point.mock\";\r\nimport { productsMockHandler } from \"@/api/hooks/products.mock\";\r\nimport { wishlistMockHandler } from \"@/api/hooks/wish.mock\";\r\n\r\nexport const worker = setupWorker(\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n  ...memberMockHandler,\r\n  ...wishlistMockHandler,\r\n  ...orderMockHandler,\r\n  ...pointMockHandler,\r\n);\r\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","users","email","password","memberMockHandler","post","BASE_URL","async","req","find","user","status","error","accessToken","push","token","orderMockHandler","productId","productQuantity","hasCashReceipt","cashReceiptType","cashReceiptNumber","message","console","log","pointMockHandler","point","getProductOptionsPath","productsMockHandler","getProductsPath","categoryId","PRODUCTS_MOCK_DATA","getProductDetailPath","products","quantity","price","options","hasNext","wishes","product","wishlistMockHandler","delete","wishId","params","findIndex","wish","parseInt","filter","content","worker","setupWorker"],"sourceRoot":""}